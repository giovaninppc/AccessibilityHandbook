/* 
  Localizable.strings
  Accessibility Handbook

  Created by Giovani Nascimento Pereira on 20/09/22.
  
*/
"title" = "Accessibility Handbook";
"handbook" = "Handbook";
"VoiceOver" = "VoiceOver";
"Search" = "Search";
"sharePage" = "Share page";

// Search

"Search.Empty.title" = "No results could be found";
"Search.Empty.message" = "Try changing your search!";
"Search.Empty.action" = "Search all pages";

// Home

"Home.developmentGuides" = "Development Guides";
"Home.handbookGame" = "The Handbook Game";
"Home.handbookGameDescription" = "Test your accessibility knowledge in a series of puzzles!";
"Home.dynamicFonts" = "Dynamic Fonts";
"Home.otherFeatures" = "Other Features";
"Home.collaborate" = "Collaborate";
"Home.shortcuts" = "Shortcuts";
"Home.colors" = "Colors";
"Home.notifications" = "Notify";

// WhatsNew

"WhatsNew.title" = "What's new on the app?";
"WhatsNew.seeTheReleaseNotes" = "See the release notes on GitHub for version %@";
"WhatsNew.version" = "Version %@";
"WhatsNew.currentVersion" = "Current Version %@";

"WhatsNew.1_1_0.description" = "New Brazilian Protuguese translation 🇧🇷!\nAnd new syntax highlight on the code examples.";

"WhatsNew.1_2_0.description" = "New Gestures and Dynamic font guides.";

"WhatsNew.1_3_0.description" = "New Puzzles!\nNew reduce motion guide.\nAnd a new dynamic font page about how to identify the preferred font size.";

"WhatsNew.1_4_0.description" = "New Dark mode guide!";

"WhatsNew.1_5_0.description" = "New visual aid section on the 'Others Features'\nNew image accessibility trait page.";

"WhatsNew.1_6_0.description" = "New 'What's new on the app' page to help users find new content they have not yet seen.\nSearch improvements, now the search content is alphabetically sorted with the respective section icon on each page.\nNew share and deeplinking capability on the app - now you can share every page with anyone and they can open them using the direct link!\nAnd new accessibility trait pages.";

"WhatsNew.1_7_0.description" = "New Home Screen layout for iPads and iPhones in landscape! Now we are using better the available size on the screen for both formats.\nAnd a brand new Rotor example page where you can try using custom rotors for yourself.";

// Using

"UsingTheVoiceOver" = "Using VoiceOver";

// Enable VoiceOver

"EnableVoiceOver.title" = "Enable VoiceOver";
"EnableVoiceOver.text1" = "VoiceOver is the name of the iOS's native screen reader solution. Used to provide visual impairment accessibility.";
"EnableVoiceOver.text2" = "To enable VoiceOver, go to the device's settings, on the 'Accessibility section'.";
"EnableVoiceOver.text3" = "Then, navigate to VoiceOver and turn the toggle on.";
"EnableVoiceOver.text4" = "As an alternative to doing this every time you want to enable VoiceOver, you may navigate to the Accessibility section again, and change the 'Accessibility shortcut' section.";
"EnableVoiceOver.text5" = "There, select the features you want to have quick-access to (make sure to select VoiceOver)";
"EnableVoiceOver.text6" = "And now, you can access any of those features by triple-pressing the side button on your device (the one that locks the screen).";
"EnableVoiceOver.comment" = "Beyond providing faster access to turning VoiceOver on, it also helps to turn it off if you get stuck while using the it.";

// Element Reading Order

"ElementReadingOrder.title" = "Element reading order";
"ElementReadingOrder.text1" = "VoiceOver will read the content on the screen trying to follow the 'Natural reading direction of the Language'";
"ElementReadingOrder.comment1" = "What does it mean?";
"ElementReadingOrder.text2" = "For instance, English, the natural reading directions is left-to-right then up-to-down";
"ElementReadingOrder.text3" = "So the Voice Over will follow this same order when reading the content.";
"ElementReadingOrder.comment2" = "You can change the reading order of your elements... if you want...";
"ElementReadingOrder.link" = "Check the 'Accessibility Priority' page for more informations";
"ElementReadingOrder.text4" = "But when we are talking about a single focused element (the element the cursor is currently at)";
"ElementReadingOrder.text5" = "The content will be read in the following order:";

// Rotor

"Rotor" = "Rotor";
"Rotor.comment1" = "The Rotor is one of those things I think not everybody knows about.";
"Rotor.text1" = "If you do the gesture of a circle with 2 fingers on the screen, you will enable the rotor.";
"Rotor.comment2" = "Turn VoiceOver on and try it for yourself!";
"Rotor.text2" = "The rotor has some default actions to it like changing the speaking rate or VoiceOver's language.";
"Rotor.text3" = "You can also create custom actions to the rotor. The idea is to use it to help users find specific content, like filtering for links, or any other similar elements.";
"Rotor.comment3" = "Use the page below to test using Custom rotor items!";
"Rotor.openExample" = "Open example page with custom Rotors.";
"Rotor.image" = "Rotor example image";

"RotorExample.title" = "Rotor Example";
"RotorExample.text1" = "This page contains custom rotor items: Images, Notes, History and Links";
"RotorExample.text2" = "Select the desired option on the Rotor, then, swipe up and down to select only the desired content.";
"RotorExample.text3" = "This is a nice example on how to use rotors to provide easier ways to filter and find content.";

"RotorExample.images" = "Images";
"RotorExample.history" = "History";
"RotorExample.notes" = "Notes";
"RotorExample.links" = "Links";

"RotorExample.vanGogh" = "Van Gogh";
"RotorExample.history1" = "Vincent Van Gogh was a Dutch painter born in March 1853. He's considered one of the most influential painters in all history, although, this recognition only came after his death.";
"RotorExample.history2" = "He did not start his life as a painter, and only started painting around 1880. And was introduced in Paris to the \"Impressioninsm\".";
"RotorExample.vanGoghImage" = "Self portrait, by Vincent Van Gogh.";
"RotorExample.note1" = "Impressionism is the name of a 19th century artistic movement. In painting, characterized by relatively small, thin, yet visible brush strokes, open composition, emphasis on accurate depiction of light in its changing qualities, ordinary subject matter, unusual visual angles, and inclusion of movement as a crucial element of human perception and experience.";
"RotorExample.link1" = "Impressionism";
"RotorExample.history3" = "One of his paintings 'The Starry Night', was painted around 1889, is today one of the most famous paintings in the entire world.";
"RotorExample.starryNight" = "Starry night, by Vincent Van Ghog.";
"RotorExample.note2" = "It depicts the view from the east-facing window of his asylum room at Saint-Rémy-de-Provence, just before sunrise, with the addition of an imaginary village.";
"RotorExample.link2" = "The Starry Night";
"RotorExample.history4" = "And another famous paintings, are the series of 'Sunflowers'. Two collection of paintings depicting sunflowers, and recognized by style and bright colors.";
"RotorExample.sunflower" = "Sunflower, by Vincent Van Gogh.";
"RotorExample.note3" = "The first series, executed in Paris in 1887, depicts the flowers lying on the ground, while the second set, made a year later in Arles, shows a bouquet of sunflowers in a vase.";
"RotorExample.link3" = "Sunflowers";

// Rotor and Headers

"RotorAndHeaders.title" = "Rotor and Headers";

"RotorAndHeaders.Rotor.text" = "If you haven't seen it yet, check our Rotor page to learn more about this component!";

"RotorAndHeaders.Header.text1" = "The accessibility trait 'header' is important to mark the beggining of a new content section, but also its important to notice how it affects the user's navigation with the Rotor.";
"RotorAndHeaders.Header.text2" = "If you haven't seen the 'Header Trait page', take a look to leanr more about it!";

"RotorAndHeaders.Together.title" = "What about them together?";
"RotorAndHeaders.Together.text1" = "If you enable the rotor, you may notice it has the 'Header' options";
"RotorAndHeaders.Together.text2" = "When selected, this option will allow you to navigate only on headers by swiping up and down on your device.";
"RotorAndHeaders.Together.text3" = "This is extremely useful to find specific content among many other things.";

"RotorAndHeaders.Example.text1" = "If you haven't noticed, this page was built using some headers!";
"RotorAndHeaders.Example.text2" = "Turn on VoiceOver and try to navigate only on them!";

// Navigation

"Navigation.title" = "Navigation";
"Navigation.gesturesLink" = "Open the gestures guide.";
"Navigation.text1" = "VoiceOver navigation is based in gestures. Each gesture, can be perfomed anywhere on the screen, and will trigger a certain action.";
"Navigation.text2" = "Once enabled, VoiceOver will display a frame on top of the current view that is being read. This frame is called 'Cursor'.";
"Navigation.text3" = "To navigate basically means changing the cursor's position, so it will read another element.";
"Navigation.text4" = "The basic navigation can be done swiping horizontally on the screen to move to cursor to the next or previous element.";
"Navigation.comment" = "This entire app was built to be used with VoiceOver enabled, the concept described on the pages will always be followed by an example so you can try them by yourself!";
"Navigation.image" = "On top is an example of the cursor. The title 'Handbook' is currently focused on the image.";
"Navigation.imageSubtitle" = "Example image of VoiceOver running on an iOS device.";

"Navigation.MoveAround.title" = "Move Around";
"Navigation.MoveAround.text1" = "When VoiceOver is enabled, swipe horizontally from left to right to move the cursor to focus on the next element.";
"Navigation.MoveAround.text2" = "And swipe from right to left to focus on the previous element.";

"Navigation.Activate.title" = "Activate an element";
"Navigation.Activate.text" = "Activate, is VoiceOver version of tapping an item. Double tap with a single finger to activate an element.";
"Navigation.Activate.comment" = "You can learn more about ways to interact with elements on the 'Interaction' section";

"Navigation.Footer.title" = "Learn more gestures";
"Navigation.Footer.text1" = "If you tap with 4 fingers twice with VoiceOver enabled, you will activate the 'Gesture Helper'.";
"Navigation.Footer.text2" = "Now, every gesture you make will be announced by VoiceOver, followed by it's function.";
"Navigation.Footer.text3" = "And to disable the helper, tap twice with 4 fiongers again!";
"Navigation.Footer.comment" = "These are just a few of the gestures available. We plan on adding a full gesture section in the future, but for now, I suggest you try it for yourself, turn VoiceOver on and test the gestures using the 'Gesture Help'.";

// Accessibility Properties

"AccElements.title" = "Accessibility Properties";

// Accessibility Element

"AccElem.title" = "Accessibility Element";
"AccElem.text1" = "When using VoiceOver, the cursor will focus on 'accessible' elements. These elements are identified by having the property accessibility element as 'True'.";
"AccElem.text2" = "Every element marked with this property 'True' can be focused by VoiceOver, and the elments with the property 'False' will be ignored.";
"AccElem.text3" = "Turn VoiceOver on and navigate through the next elements. Some will not be focused by it.";
"AccElem.comment" = "It's important to set elements that should not be focused, such as separators or other elements without accessibility labels, to not be focused.";
"AccElem.comment2" = "This way we prevent empty content, that could confuse the user, to be focused";

"AccElem.example.isAccessibilityElement" = "This is an accessibility element.";

// Accessibility Label

"AccLabel.title" = "Accessibility Label";
"AccLabel.text1" = "Accessibility labels are the content that is going to be read by VoiceOver when the item is focused.";
"AccLabel.text2" = "Every element that is focused by VoiceOver should have an accessibility label.";
"AccLabel.text3" = "Turn on VoiceOver and focus on the following element. The content read is it's accessibility label.";
"AccLabel.image" = "Starry Night, by Vincent Van Gogh. This is an accessibility label!";
"AccLabel.comment" = "Some components automatically set their accesibility label when created, such as Texts or Buttons, but you can manually set it if necessary.";
"AccLabel.text4" = "And, sometimes, you can set a different accessibility label to a view, so its easier to understand its content, like describing measurement units or abreviations.";
"AccLabel.example" = "10Kg";
"AccLabel.accessibilityLabelExample" = "10 Kilograms";

// Accessibility Hint

"AccHint.title" = "Accessibility Hint";
"AccHint.text1" = "Accessibility hints are additional content read at the end. They are always the last content to be read.";
"AccHint.text2" = "They are used to provide additional information about a focused item so the user can help better understand how it works.";
"AccHint.text3" = "For instance: You have a cell with a long press gesture (triple tap with a single finger), you may add a hint to tell the user about this additional action.";
"AccHint.comment" = "Hints should be optional to read. They are left as the last element so they can be skiped if the user already knows what to do.";

"AccHint.example.hint" = "Tap three times to copy the order code.";
"AccHint.example.title" = "Your order";
"AccHint.example.message" = "French fries with cheese";
"AccHint.example.footer" = "#123456";
"AccHint.example.notification" = "Order code copied to clipboard";

// Accessibility Trait

"AccTrait.title" = "Accessibility Trait";
"AccTrait.text1" = "Accessibility Traits are modifiers we can add to a view in order to give some additional information or add some behavior to it.";
"AccTrait.text2" = "There are several traits, some of them you may never have to use, and some other ones are really powerful and you'll be glad to know more about them.";
"AccTrait.text3" = "Traits are so important we have a dedicated section to them!";
"AccTrait.comment1" = "Make sure to check that section to learn more about each trait.";
"AccTrait.text4" = "And adding a trait to a view is very simple.";

// Accessibility Value

"AccValue.title" = "Accessibility Value";
"AccValue.text1" = "Accessibility Values represent the value (most of the times numeric) associated with your view.";
"AccValue.text2" = "It's mostly used in components that represents quantities, like counters, sliders or quick-adds.";
"AccValue.text3" = "And when changed, if the view is focused, the new value will be announced to the user.";
"AccValue.comment1" = "Check the counter example below, change its quantity and notice the 'Accessibility Value' being read.";
"AccValue.comment2" = "This example was built using the 'Adjustable Trait'.";

// Accessibility Priority

"AccPriority.title" = "Accessibility Priority";

"AccPriority.text1" = "Accessibility Sort Priority, in SwiftUI, is a way to change the order of the elements read by VoiceOver";
"AccPriority.text2" = "It is similar to defining the order of reading the elements using UIKit, but in UIKit we define this order using an array.";
"AccPriority.text3" = "It can be useful in some situations, check the example below:";
"AccPriority.comment1" = "Yes, you can change the reading order of your elements, but most of the time you dont want to do that.";
"AccPriority.comment2" = "As a general guideline, we keep the reading order the same as the natural reading order of the current language";
"AccPriority.comment3" = "For instance, English reads from left-to-right then from top-to-bottom, and thats the order VoiceOver will try to read the content.";
"AccPriority.notification" = "See how this button even being above the elements, was the last one being focused?.";

"AccPriority.Code.uikitComment" = "The content is read in the array's order";
"AccPriority.Code.swiftUIComment" = "The highest priority is read first";

// Accessibility Traits

"AccTraits.title" = "Accessibility Traits";

// List of traits

"ListOfTraits.title" = "List of Accessibility Traits";

"ListOfTraits.text1" = "Here's a full list of accessibility traits. Some of them are further discussed on this app";
"ListOfTraits.comment1" = "Since I think they are the most important ones and I actually have something to talk about. (Or I just didn't have the time yet to write something nice about this trait)";
"ListOfTraits.text2" = "Others are more obvious about how they should work, and where they should be used.";
"ListOfTraits.comment2" = "But make sure to check all of their documentations!";

"ListOfTraits.button" = "Tells that the item is a button - can be activated with a double tap.";
"ListOfTraits.adjustable" = "Allows gestures to update quantities. This is quite useful in some situations like quick-adds, sliders or counters!";
"ListOfTraits.header" = "A header that can be focused with rotor function. Indicates the begining of a new section.";
"ListOfTraits.link" = "A link to a web page";
"ListOfTraits.image" = "An image. It may not seem, but its important to use when actually focusing on an image. The user may want to share the image with someone, or print screen it to ask more later...";
"ListOfTraits.searchField" = "Allows typing and when finished will search for something.";
"ListOfTraits.keyboardKey" = "A keyboard key. (Probably not very relevant if you are not creating a custom keyboard)";
"ListOfTraits.staticText" = "A text that does not change";
"ListOfTraits.tabbar" = "A tabbar item, actually very important if you have a custom tabbar!";
"ListOfTraits.summaryElement" = "\"The accessibility element provides summary information when the app starts.\"";
"ListOfTraits.selected" = "A selected item - used when there are more items on a list that can be selected as well (segmented controllers, radio buttons…)";
"ListOfTraits.notEnabled" = "The content interaction is disabled - eg: a disabled button";
"ListOfTraits.allowsDirectInteraction" = "The accessibility element allows direct touch interaction for VoiceOver users.";
"ListOfTraits.updatesFrequently" = "The value or label frequently changes.";
"ListOfTraits.causesPageTurn" = "Makes an automatic page turn when it finished reading the element.";
"ListOfTraits.playsSound" = "Plays sound when activated";
"ListOfTraits.startsMediaSession" = "Starts playing from a media session.";

// Button trait

"ButtonTrait.title" = "Button Trait";

"ButtonTrait.text1" = "The button trait is, to me, THE most important trait.";
"ButtonTrait.text2" = "It basically tells the user that they can activate the element (with a double tap) and that something will happen";
"ButtonTrait.text3" = "If you are using a Button or a UIButton it will automatically have the 'button' trait";
"ButtonTrait.text4" = "But sometimes we need to add it manually to our view, like when making a cell that can be tapped, or some other content with a tap gesture.";

"ButtonTrait.myCell" = "My Cell";
"ButtonTrait.cellDescription" = "cell description";
"ButtonTrait.additionalInformation" = "Additional information";
"ButtonTrait.cellTapped" = "This cell was tapped";

// Image trait

"ImageTrait.title" = "Image Trait";

"ImageTrait.text1" = "The image trait is good for images or other visual elements that have no text or action.";
"ImageTrait.text2" = "If you are using an Image or an UIImage it will automatically have the image trait. However, you may also want to apply this trait to other elements, such as graphics or animations.";
"ImageTrait.text3" = "This will make the Voice Over to identify and read the element as an image.";

"ImageTrait.description" = "Image description";

// Summary Element trait

"SummaryElementTrait.title" = "Summary Element Trait";

"SummaryElementTrait.text1" = "The Summary Element Trait gives a summarized description of the most important info of the screen.";
"SummaryElementTrait.text2" = "An example is Apple's Weather app, in which the view that contains the city and current weather is used as a summary.";
"SummaryElementTrait.text3" = "This trait makes VoiceOver read this element as soon as the screen appears, regardless of the position of this element in the view hierarchy. The focus order is not affected.";

"SummaryElementTrait.description" = "This screen is about summary element traits";

// Search Field trait

"SearchFieldTrait.title" = "Search Field Trait";

"SearchFieldTrait.text1" = "The Search Field Trait is good for fields that are not just data inputs, but also performs some visual change on the screen when filled.";
"SearchFieldTrait.text2" = "When we search for something, normally these searches results are displayed somewhere on the screen.";
"SearchFieldTrait.text3" = "This trait allows VoiceOver to warn the user that the UI will change somewhere.";
"SearchFieldTrait.button" = "Try here!";

"SearchFieldTrait.description" = "Type what you are searching for.";
"SearchFieldTrait.AnimalsArray.Bee" = "🐝 Bee";
"SearchFieldTrait.AnimalsArray.Bird" = "🦜 Bird";
"SearchFieldTrait.AnimalsArray.Cat" = "🐈 Cat";
"SearchFieldTrait.AnimalsArray.Cow" = "🐄 Cow";
"SearchFieldTrait.AnimalsArray.Dog" = "🐶 Dog";
"SearchFieldTrait.AnimalsArray.Snake" = "🐍 Snake";

// Adjustable

"Adjustable.title" = "Adjustable trait";

"Adjustable.text1" = "Adjustable components are actually using an accessibility trait.";
"Adjustable.text2" = "It's used on components that have some kind of quantity change or selection, like sliders, counters or quick-adds.";
"Adjustable.text3" = "It's very powerful, and, when focused, an adjustable view will gain the swipe up and down gestures";
"Adjustable.text4" = "That can be implemented to handle it's respective actions, without the need to directly tap into the buttons.";

"Adjustable.seeMore" = "See more on accessibility traits!";

"Adjustable.Code.increment" = "Handle increment";
"Adjustable.Code.decrement" = "Handle decrement";

// Colors

"ColorsGuide.title" = "Colors Guide";
"ColorsGuide.introduction" = "Introduction";

// About Colors

"AboutColors.title" = "About Colors";
"AboutColors.text1" = "I like colors.\nBut not everybody experience them in the same way.";
"AboutColors.comment1" = "Some people don't experience them at all!";
"AboutColors.text2" = "Colors are how our brains make sense of the light that reach our eyes. We have cells that will interact with different frequencies of light, and their combination will produce what we see.";
"AboutColors.comment2" = "I'm over extending myself into physics and biology, but bear with me.";
"AboutColors.text3" = "And when building an app, colors are usually something that come before actually programming anything, or during what I like to call 'The design step'.";
"AboutColors.text4" = "So, if you are working on a team with a Designer, I highly recommend you bring these discussion to them. Understanding more about colors, how they affect the users and what we can consider accessibility while handling colors on our app.";
"AboutColors.comment3" = "If you don't have a designer there... Well, I hope this content also helps you understand a little bit more about it!";
"AboutColors.higColors" = "Human Interface Guidelines - Colors";
"AboutColors.image" = "Image of pretty colors";

// Collaboration

"Collaboration.title" = "Collaboration";
"Collaboration.OpenSource.title" = "OpenSource";
"Collaboration.OpenSource.text1" = "Yep, the Handbook is an Open Source project!";
"Collaboration.OpenSource.text2" = "The idea is that the app's code can be used as examples. Take a look into the code, see for yourself how the feature actually works when running on an app.";
"Collaboration.OpenSource.comment1" = "It's not perfect, and it's a little weird in some places... I know that, ok?";
"Collaboration.OpenSource.text3" = "But fell free to suggest changes, fix some bugs and identify issues on our GitHub project!";
"Collaboration.githubPreoject" = "Check our GitHub project!";
"Collaboration.license" = "License";
"Collaboration.Issue.title" = "Found an issue?";
"Collaboration.Issue.text1" = "Report to us on our GitHub project!";
"Collaboration.Issue.text2" = "It could be some translation problem, some accessibility issue (nobody's perfect, okay?), or anything at all!";
"Collaboration.submitIssue" = "Submit an issue report!";
"Collaboration.Translate.title" = "Help us translate";
"Collaboration.Translate.text1" = "If you are a developer and would like to bring the handbook closer to your community and your peers, consider helping us translating the app to other languages!";
"Collaboration.Translate.text2" = "You can get the project on GitHub and open a Pull Requets translating the content!";
"Collaboration.Translate.comment" = "It's a lot of stuff... I know, but the more the merrier!";
"Collaboration.submitPR" = "Submit a Pull Request with the changes!";
"Collaboration.Suggestion.title" = "Want to see something specific?";
"Collaboration.Suggestion.text1" = "Maybe you have something that you wanted to know that is not present on the app";
"Collaboration.Suggestion.text2" = "Or you'd like to suggest a new puzzle to add to the games.";
"Collaboration.Suggestion.text3" = "Fell free to tell us ay idea you have!";
"Collaboration.submitFeatureRequest" = "Submit a feature request!";

// About the app

"AboutTheApp.title" = "About the app";

"AboutTheApp.History.text1" = "The Accessibility Handbook started as an idea with some colleagues and friends, aiming to be an easy way to learn more about iOS accessibility features.";
"AboutTheApp.History.text2" = "At the time we started working on it, but we never got to finish or publish the Handbook. So, a while later, I took what I learned and decided to bring it into the world! Rewriting the contents, adding UIKit and SwiftUI versions to make something really fresh and nice.";
"AboutTheApp.History.text3" = "I always thought the information about accessibility was always there, but you had to know what to look for.";
"AboutTheApp.History.text4" = "That's where this handbook comes, it's something that can be collaborative, easy to use, and fast to find! It's an app! You can carry it around with you and read anytime.";
"AboutTheApp.History.text5" = "It's mostly based on my experiences as a developer, with real-life examples that (I hope) will help you understand more about Accessibility and also help you use in your own projects!";

"AboutTheApp.Game.title" = "What about the Game?";
"AboutTheApp.Game.text1" = "The Handbook was pretty nice and all... but it was a little boring.";
"AboutTheApp.Game.text2" = "So I tryied to make something that would be nicer to use and to learn,";
"AboutTheApp.Game.text3" = "And what best way to do that than with a game?";
"AboutTheApp.Game.comment" = "The puzzles are not supposed to be hard, they are just a nice way to practice your accessibility knowledge!";

"AboutTheApp.Disclaimer.title" = "Disclaimer";
"AboutTheApp.Disclaimer.text1" = "This app and it's content is supposed to be a helpful guide, based on real development experiences.";
"AboutTheApp.Disclaimer.text2" = "I do not know EVERYTHING about accessibility, and I'm learning a little bit more every day.";
"AboutTheApp.Disclaimer.comment1" = "And I have sure learned a lot while developing this very own app!";
"AboutTheApp.Disclaimer.text3" = "It may have some mistakes or misconceptions, so please, consider reporting if you find any of those.";
"AboutTheApp.Disclaimer.text4" = "I want it to be a reliable tool that can be cosulted during everyday development.";
"AboutTheApp.Disclaimer.openCollaborationPage" = "Check the Collaboration page to see more ways to report issues and to help the app's development!";

"AboutTheApp.Review.text" = "Review the Handbook on the AppStore!";
"AboutTheApp.Review.button" = "Make a review";
"AboutTheApp.language" = "The Handbook is available in English US and Portuguese BR. Change your language preference for the app at the device's settings.";

// Color blindness

"ColorBlind.title" = "Color Blindness";
"ColorBlind.About.text1" = "Color blindness is a decreased ability to see color differences.";
"ColorBlind.About.text2" = "What you may not know is that there are 'levels' of color blindness. A person with green color deficiency, for example, may not see the green color at all, or may see it a little bit less that a non-color-blind person.";
"ColorBlind.About.text3" = "You may take an Ishihara test to check if you are color blind. I have a friend who discovered she was color blind when we were in college! And before that, I'd expect you to identify this condition much earlier in life.";
"ColorBlind.About.ishihara" = "Example of ishihara color identifying test.";
"ColorBlind.About.comment" = "These above are examples of an Ishihara test. For a 'normal' vision person, it's expected to see '12', '6' and '74' respectively.";
"ColorBlind.About.text4" = "But how does this affect our work when we are building an app?";
"ColorBlind.About.ishiharaTest" = "Ishihara Test";

"ColorBlind.Handle.title" = "Handling content considering colorblindness";
"ColorBlind.Handle.text1" = "First, make sure your content does not rely on colors only to take any actions or to identify informations. Take the example below.";
"ColorBlind.Handle.text2" = "Here, on the first column, we are color coding red the negative items and green the positive ones. But that's exactly what we want to avoid. The second Colum has a much better 'universal' experience where identifying these items as positive or negative does not rely solely on color.";
"ColorBlind.Handle.comment1" = "Using + and - may have cultural connotations, so it may not be the best example here. But it's just an example.";
"ColorBlind.Handle.comment2" = "If you do rely on colors only on some part of your app, don't want to change it, but still want to to make it usable for colorblind users, check our 'Differentiate without colors' page.";

"ColorBlind.Images.title" = "Careful with images";
"ColorBlind.Images.text1" = "Sometimes we render content with images. Banners loaded from Backend, some promotional stuff, or just something that looks nicer on the image render.";
"ColorBlind.Images.comment" = "First, make sure to add an accessibility label to this image!";
"ColorBlind.Images.text2" = "You also need to be careful to not have content ot be read on conflicting colors for color blindness.";

// Contrast

"Contrast.title" = "Contrast";
"Contrast.text1" = "Contrast is the difference in luminance or colour that makes an object (or its representation in an image or display) distinguishable.";
"Contrast.comment1" = "But why talk about contrast on an accessibility context?";
"Contrast.text2" = "Contrast is important when taking colors on your applications. Everything that should be visible should be well... Visible.";
"Contrast.text3" = "By that I mean you should be careful when adding colored text on top of colored backgrounds. The base good contrast is black-on-white (or white-on-black) text.";
"Contrast.comment2" = "But is also depends on the font itself, the font's weight...";

"Contrast.Example.text1" = "A nice way to test for contrast is using the WCAG contrast guide";
"Contrast.Example.comment1" = "WCAG stands for 'Web Content Accessibility Guidelines', and I know it's more directed to web, not mobile environments, but that's also nice to take a look into, specially if you are interested in learning more about contrast in accessibility.";
"Contrast.Example.example1" = "This example above fails the WCAG test for contrast.";
"Contrast.Example.example2" = "This one does kida ok, so you can use this color combination with larger fonts.";
"Contrast.Example.example3" = "And this one is pretty good! The classics.";
"Contrast.Example.link" = "You can try for yourself on this contrast-check tool!";

// Differentiate without colors

"Differentiate.title" = "Differentiate without colors";

"Differentiate.Intro.text1" = "The Differentiate Without Colors, is the way the user can ask to, well, do not use only colors to differentiate content.";
"Differentiate.Intro.text2" = "On code, it's basically going to be a boolean you can check if the user enabled this feature or not.";
"Differentiate.Intro.comment1" = "Although, most of the time, it is a good practice to not use only colors to differentiate content. This is the kind of issue that can be prevented on the 'design step', while planning your app or your feature, and before implementing it.";
"Differentiate.Intro.text3" = "This feature can be enabled on the device's settings at the Accessibility section.";
"Differentiate.Intro.text4" = "Here's a classic example, the wire game! Where you need to connect the wires with the same color on both sides of the screen.";
"Differentiate.Intro.text5" = "By adding icons next to the wires, you make sure the game does not rely only on color coding to be played.";
"Differentiate.Intro.image" = "Image of the Among Us game wire game with multiple color blindness filters applyed.";
"Differentiate.Intro.comment2" = "A nice example is the game 'Among Us'. On the image above, from left-to-right then top-to-bottom: no filter, deuteranopia filter, protanopia filter, tritanopia filter. These weird names are the names of some color blindness types.";

"Differentiate.Handle.text1" = "To check if the feature is enabled, you can check 'UIAccessibility.shouldDifferentiateWithoutColor'";
"Differentiate.Handle.text2" = "And you can alo subscribe to listen to changes in this property using the Notification Center.";
"Differentiate.Handle.text3" = "And you can use an Environment property in SwiftUI for the same purpose.";

// Color acc feature

"ColorAccessibilityFeatures" = "Color Accessibility Features";

// Reduce Transparency

"ReduceTransparency.title" = "Reduce Transparency";

"ReduceTransparency.Intro.text1" = "This is an accessibility option that needs to be enabled on the Device's settings.";
"ReduceTransparency.Intro.text2" = "When enabled, the user want's to tell you they want to reduce the amount of blur and translucency on the app.";
"ReduceTransparency.Intro.comment" = "Some poeple may have a hard time looking into translucent elements!";

"ReduceTransparency.Example.text1" = "Try enabling and disabling this option and check the content below.";
"ReduceTransparency.Example.example" = "Transparent content to be read\non top of a blured background";

"ReduceTransparency.Code.text1" = "And, it's pretty easy to handle!";
"ReduceTransparency.Code.text2" = "On UIKit, you need to check a boolean on UIAccessibility to check if the feature is enabled.";
"ReduceTransparency.Code.text3" = "And you can alo subscribe to listen to changes in this property using the Notification Center.";
"ReduceTransparency.Code.text4" = "And on SwiftUI you can use an Environment variable!";

// Invert Colors

"InvertColors.title" = "Invert Colors";

"InvertColors.Intro.text1" = "Color Inversion is another accessibility option a user can enable on the device's settings.";
"InvertColors.Intro.text2" = "There are 2 types of color inversion:";
"InvertColors.Intro.text3" = "Classic - where everything will be inverted;";
"InvertColors.Intro.text4" = "Smart - where (almost) everything in light mode will be inverted, and you (the developer) can choose not to.";
"InvertColors.Intro.comment1" = "But why would anyone use this?";
"InvertColors.Intro.text5" = "I believe it comes down to difficulties in reading dark text on top of a white background. I myself, when I'm not using glasses, I find it pretty difficult to read content like this, so I preffer the dark mode, with white text on top of a dark background.";
"InvertColors.Intro.text6" = "The color inversion comes as an alternative to help you in this scenario.";

"InvertColors.WhatToDo.title" = "What to do as a developer?";
"InvertColors.WhatToDo.text1" = "You basically need to mark what you don't want to be inverted. Like, images, a photo of your dog, a nice hamburguer that would look gross when inverted...";
"InvertColors.WhatToDo.text2" = "And to do so, you simply need to set a boolean telling you dont want this view to be inverted.";

"InvertColors.Example.text1" = "Change the display appearance from light/dark mode and the color inversion setting and check the images below.";
"InvertColors.Example.image1" = "Starry night, by Van Gogh";
"InvertColors.Example.image2" = "Starry night, by Van Gogh. Image does not invert.";
"InvertColors.Example.comment" = "Only the second image is set to not invert colors.";

// Header Trait

"HeaderTrait.title" = "Header Trait";
"HeaderTrait.text1" = "The Header trait is used to describe headers (obviously), which indicates the beggining of a new content section.";
"HeaderTrait.comment1" = "So... that's all?";
"HeaderTrait.text2" = "The fun part, is that you can navigate only on headers by using the rotor function.";
"HeaderTrait.link" = "Check the Rotor and Header page!";
"HeaderTrait.text3" = "This way, you can skip every content that is not a header, and easily find the section you are looking for.";

// Increase Contrast

"IncreaseContrast.title" = "Increase Contrast";

"IncreaseContrast.Intro.text1" = "Another accessibility option the user can enable on the device's settings.";
"IncreaseContrast.Intro.text2" = "This one is also kinda obvious, the user is requesting to enhance contrast between foreground and background colors, so it gets easier to distinguish between them.";

"IncreaseContrast.Property.title" = "Handling contrast changes";
"IncreaseContrast.Property.text1" = "An easy way to support this is by using 'System Colors'. They will automatically adapt to the increase contrast.";
"IncreaseContrast.Property.comment1" = "This app was built using system colors! Change the contrast options on your device's settings and check the differences!";
"IncreaseContrast.Property.text2" = "Or you can use the 'UIAccessibility.accessibilityDisplayShouldIncreaseContrast' boolean to check the current contrast state, and act accordingly.";

"IncreaseContrast.swiftUI.text1" = "And in SwiftUI, there is a neat contrast tool you can use to change the contrast on your views";
"IncreaseContrast.swiftUI.comment1" = "Not that I have really used this contrast tool in any real project.";

"IncreaseContrast.example" = "Example of using the contrast tool. There are 6 images with increasing contrast. ";

// Haptics

"Haptic.text1" = "Haptics are little vibrations the device can make";
"Haptic.text2" = "There are several types of Haptics, and each one is used to represent something different.";
"Haptic.comment1" = "But... why are we talking about haptics in an accessibility guide?";
"Haptic.text3" = "Haptics are a type of feedback. When you select something, when something suceeds...";
"Haptic.text4" = "It's an additional layer of feedback. Imagine most actions have some kind of visual feedback, like when you tap a button and it changes it's color slightly so you know the button is pressed.";
"Haptic.text5" = "Since sometimes we cannot rely on visual cues, the Haptics can be a very interesting and powerful way to improve accessibility.";

"HapticList.title" = "List of Haptics";
"HapticList.text1" = "Here's a list of the Haptics available:";
"HapticList.comment" = "I also suggest you check the source code of this project. It has a nice Haptic wrapper to be used on UIKit or SwiftUI!";
"HapticList.sourceCode" = "Haptic source code";
"HapticList.iPadDisclaimer" = "Haptics are not available on iPad, the buttons below may not work on your current device.";

"Haptics.selection" = "Selection";
"Haptics.success" = "Success";
"Haptics.error" = "Error";
"Haptics.warning" = "Warning";
"Haptics.lighImpact" = "Light Impact";
"Haptics.mediumImpact" = "Medium Impact";
"Haptics.heavyImpact" = "Heavy Impact";

// Activate

"Activate.title" = "Activate element";
"Activate.text1" = "Activating an element (double tapping it with VoiceOver enabled) is the same as a single tap when not using the voice over.";
"Activate.comment1" = "Tap a button, click on a cell...";
"Activate.text2" = "Most of the time, this action will hapen automatically when your cell has a tap gesture our is a button.";
"Activate.text3" = "But you can customize or add a specific action for the activation gesture";
"Activate.codeComment" = "Handle Action";

// Long Press

"LongPress.title" = "Long Press";
"LongPress.comment1" = "Long press?";
"LongPress.text1" = "Long press is not an accessibility specific gesture, but I like to add it here because it has a specific gesture to be handled when using VoiceOver.";
"LongPress.text2" = "To simulate a Long Press you do a triple tap when focused on the item.";
"LongPress.text3" = "Turn VoiceOver on and focus on the next element. It has a long press gesture.";
"LongPress.comment2" = "If you are using a long press gesture, I suggest always adding an accessibility hint to tell your user about it!";
"LongPress.text4" = "The long press is specially useful on 'Back buttons', which on newer iOS will display the navigation hierarchy, allowing you to easily navigate back to the page you want.";

"LongPress.Example.text" = "Some generic view in here";
"LongPress.Example.hint" = "Tap three times to copy the text";
"LongPress.Example.notification" = "Text copied to the clipboard";

"LongPress.Code.comment" = "Handle gesture";

// Custom Actions

"CustomActions.title" = "Custom Actions";
"CustomActions.text1" = "'Custom Actions' is the name of the ability to add multiple actions to be executed on the same view. When focused, VoiceOver will read 'actions available' at the end, meaning you can swipe up and down to change the action that will be executed when you activate the element.";
"CustomActions.comment1" = "But, when would I even use that?";
"CustomActions.text2" = "It's a good tool to improve the accessibility on elements that can perform multiple actions.";
"CustomActions.text3" = "Like a Card cell, which can select the card, delete, edit";
"CustomActions.text4" = "Usually you'd have multiple buttons for each action, but focusing on each individual button would not be a very good VoiceOver experience.";
"CustomActions.comment2" = "I find custom actions to be also very useful when some of the actions are hidden behind an animation, like when you need to tap an icon, something changes, and other icons appears.";

"CustomActions.creditCard" = "Credit Card";
"CustomActions.accessible" = "Credit Card, ending in 1234";

// Magic Tap

"MagicTap.title" = "Magic Tap";
"MagicTap.text1" = "'Magic Tap' is a double tap with two fingers gesture.";
"MagicTap.text2" = "You can configure the 'Magic Tap' to do basically anything.";
"MagicTap.text3" = "Apple's documentation suggests you use it to be a shortcut to 'your main action', such as a music player, it would be suited to play and pause actions, or on a camera app, it would be suited to take a photo.";
"MagicTap.text4" = "Test the Magic tap on the view below!";
"MagicTap.comment1" = "When implementing the 'Magic Tap', make sure it's enabled on the focused view, otherwise, it competes with the devices media player, because it's the same gesture to play/pause on the device.";

"MagicTap.Example.thisContentIsMagic" = "This content has a Magic Tap!";
"MagicTap.Example.magicPerformed" = "Magic tap perfomed";

"VoiceOverGuide" = "VoiceOver Guide";

// Accessibility Notifications

"AccNotifications.title" = "Accessibility Notifications";

// Announcement

"Announcement.title" = "Announcement";
"Announcement.textToBeRead" = "Text to be read";

"Announcement.text1" = "An announcement notification is a way to make VoiceOver read something that is not currently focused.";
"Announcement.text2" = "Sometimes, some information changes on the screen and we show to the user using some animation to grab their attention.";
"Announcement.text3" = "But, we cannot rely on visual cues to show information when talking about visual accessibility.";
"Announcement.comment1" = "To me, that's where the announcements shine!";
"Announcement.comment2" = "The code cells bellow are another example of announcements when you copy the code!";

"Announcement.Notifications.negative" = "Going negative, aren't we?";
"Announcement.Notifications.small" = "Oh the values are increasing!";
"Announcement.Notifications.medium" = "You like to increase, don't you?";
"Announcement.Notifications.large" = "Yep, keep increasing...";
"Announcement.Notifications.huge" = "Getting close to the end";
"Announcement.Notifications.final" = "This is the final message";

// Notify Screen changes

"NotifyChanges.title" = "Notify Screen changes";
"NotifyChanges.text1" = "When something changes on the screen, we need to remember a VoiceOver user will not be able to see it.";
"NotifyChanges.text2" = "This is also valid to when the screen itself changes.";
"NotifyChanges.text3" = "But, we have some Accessibility Notifications that behave like audio cues to tell the user something has happened.";
"NotifyChanges.comment1" = "But what is the argument that is 'nil' on the code?";
"NotifyChanges.comment2" = "Find out more about it on the following page!";

"NotifyChanges.screenChange" = "Screen change notification";
"NotifyChanges.layoutChange" = "Layout change notification";

// Change cursor position

"ChangeCursor.title" = "Change cursor position";

"ChangeCursor.Intro.text1" = "Most of the time, we want the user to be in control to where VoiceOver cursor should move to.";
"ChangeCursor.Intro.text2" = "Sometimes, when we change something on the screen, like presenting a modal on top of everything, we want to redirect the user directly to the new content.";
"ChangeCursor.Intro.comment" = "But, to do that, it works different in UIKit and SwiftUI, so we are going to have a section for each in this page";

"ChangeCursor.uikit.text1" = "To change the cursor position on UIKit, we are going to use the screen change notifications.";
"ChangeCursor.uikit.text2" = "When triggering one of these notifications, we can pass as the argument the view we want VoiceOver to focus on.";
"ChangeCursor.uikit.link" = "More on Screen Change notifications.";

"ChangeCursor.swiftui.text1" = "On SwiftUI, we are not going to use the Accessibility Notifications, instead, we are using the @AccessibilityFocusState";
"ChangeCursor.swiftui.text2" = "It allow to control if the cursor is focused on a view, and move the navigation to it.";
"ChangeCursor.swiftui.text3" = "First, create a new Boolean property using this wrapper";
"ChangeCursor.swiftui.text4" = "Then, assign it to the view you want to control by using a view modifier.";
"ChangeCursor.swiftui.text5" = "Now you can change the focus to the view by setting the property to 'True'.";
"ChangeCursor.swiftui.comment" = "You can even observe this property to handle something when it focus/unfocus on it.";

// Content Hierarchy

"ContentHiererachy" = "Content Hierarchy";

// Modal

"Modal.title" = "Modal views";

"Modal.Intro.text1" = "Modal Views, in this case, we are talking about any view that is displayed on top of existing content. Banners, toasts, floating buttons...";
"Modal.Intro.text2" = "The problem is: VoiceOver will try to use the language's Natural reading directions to read the content, and even if your view is on top of every other view, VoiceOver will still focus on the content behind it.";
"Modal.Intro.text3" = "To prevent this issue, we can mark a view as being a 'Modal'. This will make VoiceOver focus only on that view while it's being presented.";
"Modal.Intro.comment1" = "But handling Modals has some differences in UIKit and SwiftUI, so I'm splitting into a section for each one here.";
"Modal.Intro.link" = "Read more on reading order.";

"Modal.uikit.text1" = "On UIKit, every UIView has the property 'accessibilityViewIsModal'. And we need to set it to 'True' if we want to mark a view as being a modal.";
"Modal.uikit.text2" = "But, on my experience, I find that simply setting it to 'True' sometimes does not have the expected behavior.";
"Modal.uikit.text3" = "I suggest overriding this property on the Modal View's class, and set it to the correct value.";

"Modal.swiftui.text1" = "On SwiftUI the 'Modal' can be set as it was an accessibility trait.";

"Modal.example.text1" = "Turn VoiceOver on and test the modals below.";
"Modal.example.goodModal" = "Good modal";
"Modal.example.thisGoodModal" = "This is a Good modal";
"Modal.example.badModal" = "Bad Modal";
"Modal.example.thisBadModal" = "This is a Bad modal";
"Modal.example.comment" = "Noticed that when opening the good modal, the cursor focused directly on it? It is important when displaying a modal on top of existing content that we do that.";
"Modal.example.link" = "Learn more about it on the Notifications section.";

// Grouping

"Grouping.title" = "Grouping Elements";
"Grouping.text1" = "To me, Grouping elements correctly is one of the most important parts of building a good accessible view.";
"Grouping.text2" = "Imagine a carousel with a bunch of cells, when using VoiceOver, we want the cursor to focus on each individual cell, not on the cells content.";
"Grouping.comment" = "This may seem obvious, but can be easily forgotten on development.";
"Grouping.text3" = "Turn VoiceOver on and check both carousels below, one has the content correctly grouped, and the other don't.";

"Grouping.goodCarousel" = "Good Carousel";
"Grouping.badCarousel" = "Bad Carousel";
"Grouping.cellTitle" = "Cell title";
"Grouping.cellContent" = "Cell content";
"Grouping.cellComment" = "Cell comment";

"Grouping.uikit.text" = "On UIKit, you need to make the parent view an accessible element and not the children. Then, combine them to build the correct accessibility label for the parent.";
"Grouping.swiftui.text" = "SwiftUI has a better wrapper to combine all children into a single accessible element.";

// Game Success

"GameSuccess.title" = "Congratulations!";
"GameSuccess.subtitle" = "You solved the puzzle!";
"GameSuccess.text" = "If you want to learn more about this puzzle check our documentation";
"GameSuccess.suggestedReading" = "Suggested reading";

// Hint View

"Hint" = "Hint";
"Hint.hint" = "Activate to get a hint on how to solve this puzzle.";
"Hint.close" = "Close hint";
"Hint.open" = "Open hint";
"Hint.title" = "🤔 Having Trouble?";
"Hint.text1" = "The Handbook puzzles were made to be solved using some kind of accessibility tool (or a combination of them).";
"Hint.text2" = "If you can't figure it out, maybe this page will help you...";

// Games

"GameView.comment" = "Try solving these puzzles to learn more about accessibility features!";

"GameCell.finishedHint" = "You have already succeeded in this puzzle!";
"GameCell.unfinishedHint" = "You haven't finished this puzzle yet";

"WhereIsMyContent.title" = "Where is my content?";
"WhereIsMyContent.text1" = "This puzzle is pretty easy.";
"WhereIsMyContent.text2" = "You need to find the correct button to finish the puzzle by using VoiceOver!";

"FindThePassword.title" = "Find the Password";
"FindThePassword.text1" = "You need to type in the correct password!";
"FindThePassword.text2" = "It's as simple as that";
"FindThePassword.comment" = "You just need to find out what the password is...";

"BePatient.title" = "Be Patient";
"BePatient.text" = "Tap the elements in the correct order!";
"BePatient.comment" = "Pacience is the key...";

"Impostor.title" = "Impostor";
"Impostor.text" = "Find the impostor, and type it's name!";
"Impostor.comment" = "Ask them, maybe they'll tell you.";
"Impostor.field" = "Type the impostor's name";
"Impostor.hint" = "I'm not the impostor";
"Impostor.impostor" = "Yes, I'm the impostor";

"Invisibility.title" = "Invisibility";
"Invisibility.text" = "Just because you can't see, doens't mean it's not there.";
"Invisibility.comment" = "Wait... Is this content TRANSPARENT?";
"Invisibility.transparent" = "Wait... Is this content TRANSPARENT?";

"Impostor2.title" = "Impostor 2.0";
"Impostor2.text" = "Find the impostor, and type it's name!";
"Impostor2.comment" = "Ask them, maybe they'll tell you.";
"Impostor2.field" = "Type the impostor's name";

"TheMagicPuzzle.title" = "The 'Magic' Puzzle";
"TheMagicPuzzle.text" = "This puzzle is Magic!";
"TheMagicPuzzle.comment" = "I don't know what else to tell you...";

"SecretActions.title" = "Secret Actions";
"SecretActions.text" = "Feed each animal the correct food!";
"SecretActions.comment" = "Don't worry, they'll tell you what they like.";
"SecretActions.Action.apples" = "Give Apples";
"SecretActions.Action.grass" = "Give Grass";
"SecretActions.Action.bubbles" = "Give Bubbles";
"SecretActions.Action.nectar" = "Give Nectar";

"FillTheCup.title" = "Fill the Cup";
"FillTheCup.text" = "Fill the circles all the way up!";
"FillTheCup.comment" = "You just need to find a way to do it";

"AColorfulMessage.title" = "A 'Colorful' Message";
"AColorfulMessage.text" = "Type in the correct password!";
"AColorfulMessage.comment" = "It is a 6 digit password";

"TheUpsideDown.title" = "The Upside Down";
"TheUpsideDown.text1" = "Maybe there is a way to see it.";
"TheUpsideDown.text2" = "I feel so inverted";

"SuperFriend.title" = "Super Friend";
"SuperFriend.text" = "Everyone here is so friendly,";
"SuperFriend.comment" = "Find the person with the biggest amount of friends!";
"SuperFriend.field" = "Super Friend name";

"IncreasingHints.title" = "Increasing hints";
"IncreasingHints.text" = "Can you read the hints? Use them to find the correct password.";
"IncreasingHints.hint1" = "It's just so tiny... I don't remember what I had to say.";
"IncreasingHints.hint2" = "The first hint needs to be a little bigger.";
"IncreasingHints.hint3" = "The second number is 3, but maybe you can find another hints?";
"IncreasingHints.hint4" = "The first number is 2 less than the second one.";
"IncreasingHints.hint5" = "Getting big, aren't we? The last number is 4.";
"IncreasingHints.hint6" = "The third number is the same as the first one.";
"IncreasingHints.hint7" = "The fourth number is twice the second one.";
"IncreasingHints.hint8" = "The missing number is the same as the last one!";
"IncreasingHints.unspecified" = "I'm super lost... I don't know what ot say.";

"AnAlternative.title" = "An alternative";
"AnAlternative.text" = "You should alternate between... something... and try to enable items in the correct order.";

// Actions

"doubleTapToCopy" = "Tap twice to copy";
"appleDoc" = " See more on Apple's documentation for \"%@\"";
"nextPage" = "Next page %@";
"backToIndex" = "Back to Index";
"goPlay" = "Go play it!";
"moreOnWikipedia" = "More on Wikipedia";
"more" = "More";
"moreOnTheWeb" = "More on the Web";
"dedicatedPage" = "Dedicated page";
"select" = "Select";
"delete" = "Delete";
"edit" = "Edit";
"selected" = "Selected";
"deleted" = "Deleted";
"edited" = "Edited";
"handleAction" = "Handle Action";
"dismiss" = "Dismiss";
"goBack" = "Go Back";
"tapToWin" = "Tap to win";
"tapToChange" = "Tap to change";

// Code

"codeCopied" = "Code copied!";
"copyCode" = "Copy Code";
"closeCodeView" = "Close code view";
"codeExample" = "%@ code example.";
"codeHint" = "Tap twice to open code in full screen, and tap three times to copy.";

// Some nouns

"freeShipping" = "Free shipping";
"additionalCost" = "Additional cost";
"earlyAccess" = "Early access";
"extraBureaucracy" = "Extra bureaucracy";
"regularText" = "Regular text";
"boldText" = "Bold text";
"openSettings" = "Open Settings";
"haptic" = "Haptic";
"haptics" = "Haptics";
"moon" = "Moon";
"cloud" = "Cloud";
"sun" = "Sun";
"sunrise" = "Sunrise";
"snow" = "Snow";
"rain" = "Rain";
"fog" = "Fog";
"weatherIcons" = "Weather Icons";
"interactrion" = "Interaction";
"uikit" = "UIKit";
"swiftUI" = "SwiftUI";
"modal" = "Modal";
"example" = "Example";
"examples" = "Examples";
"lobster" = "Lobster";
"pumpkin" = "Pumpkin";
"iceCream" = "Ice cream";
"flag" = "Flag";
"potato" = "Potato";
"password" = "Password";
"puzzles" = "Puzzles";
"unfinishedPuzzles" = "Unfinished Puzzles";
"completedPuzzles" = "Completed Puzzles";
"pencil" = "Pencil";
"paper" = "Paper";
"paperPlane" = "Paper plane";
"book" = "Book";
"bell" = "Bell";
"minimum" = "Minimum";
"maximum" = "Maximum";

// Gestures

"Gestures.title" = "Gestures Guide";

"Gestures.text1" = "Here's an initial guide to start using VoiceOver gestures.";

"Gestures.swipeRight.description" = "Move cursor to the next element";
"Gestures.swipeLeft.description" = "Move cursor to the previous element";
"Gestures.swipeUp.description" = "Change Rotor filter / Increase adjustable element / Change selected custom action";
"Gestures.swipeDown.description" = "Change Rotor filter / Decrease adjustable element / Change selected custom action";
"Gestures.singleTap.description" = "Read focused element";
"Gestures.doubleTap.description" = "Activate element, the same as tapping it when the VoicOver is disabled.";
"Gestures.tripleTap.description" = "Long press gesture";
"Gestures.twoFingersSingleTap.description" = "Pause/Play reading. You can make VoiceOver pause the current reading, and by making the same gesture again, it will keep going from where it stoped.";
"Gestures.twoFingersDoubleTap.description" = "Execute Magic Tap.";
"Gestures.twoFingersSwipeUp.description" = "Read from top - will move the cursor to the top of the page.";
"Gestures.twoFingersSwipeDown.description" = "Read all - will starting readin the content automatically.";
"Gestures.threeFingersSwipeUp.description" = "Scroll down.";
"Gestures.threeFingersSwipeDown.description" = "Scroll up.";
"Gestures.threeFingersSwipeLeft.description" = "Scroll right.";
"Gestures.threeFingersSwipeRight.description" = "Scroll left.";
"Gestures.threeFingersSingleTap.description" = "Read item summary. It will also describe the cursor position on the screen.";
"Gestures.threeFingersDoubleTap.description" = "Mute/unmute the screen reader";
"Gestures.threeFingersTripleTap.description" = "Enable/disable the screen curtain. Turns the screen off but the content is still running.";
"Gestures.fourFingersDoubleTap.description" = "Start/Stop gesture helper. When enabled, it will tell every gesture performed and what it does.";
"Gestures.helper" = "Gesture Helper";
"Gestures.reading" = "Reading";
"Gestures.dismiss.description" = "Gesture to dismiss modals and pop to preview view on navigation stack.";

"Gesture.swipeRight" = "Swipe Right";
"Gesture.swipeLeft" = "Swipe Left";
"Gesture.swipeUp" = "Swipe Up";
"Gesture.swipeDown" = "Swipe Down";
"Gesture.singleTap" = "Single Tap";
"Gesture.doubleTap" = "Double Tap";
"Gesture.tripleTap" = "Triple Tap";
"Gesture.twoFingersSingleTap" = "Two fingers single Tap";
"Gesture.twoFingersDoubleTap" = "Two fingers double Tap";
"Gesture.twoFingersSwipeUp" = "Two fingers swipe up";
"Gesture.twoFingersSwipeDown" = "Two fingers swipe down";
"Gesture.threeFingersSwipeUp" = "Three fingers swipe up";
"Gesture.threeFingersSwipeDown" = "Three fingers swipe down";
"Gesture.threeFingersSwipeLeft" = "Three fingers swipe left";
"Gesture.threeFingersSwipeRight" = "Three fingers swipe right";
"Gesture.threeFingersSingleTap" = "Three fingers single tap";
"Gesture.threeFingersDoubleTap" = "Three fingers double tap";
"Gesture.threeFingersTripleTap" = "Three fingers triple tap";
"Gesture.fourFingersDoubleTap" = "Four fingers double tap.";
"Gesture.dismiss" = "'Z' with 2 fingers.";

"Gesture.accessible" = "Animation representing the gesture for %@";

// Dynamic Fonts

"DynamicFonts.title" = "Dynamic Fonts";
"DynamicFonts.implementing" = "Implementing Dynamic Fonts";

// Fonts section

"Fonts.title" = "Fonts";

// AboutFonts

"AboutFonts.title" = "About Fonts";
"AboutFonts.Intro.comment1" = "Fonts are cool.";
"AboutFonts.Intro.text1" = "A font is a particular size, weight and style of lettering. I like to think about the 'drawing' of the characters that make the text.";
"AboutFonts.Intro.text2" = "You are currently reading a text, written in a specific font.";
"AboutFonts.Intro.comment2" = "This is the iOS's system font, and it is called SF Pro.";
"AboutFonts.Intro.text3" = "There are several fonts. Hundreds and hundreds of thousands. And we may decide to use a custom font for our app, maybe it fits better in our content, maybe it's part of our global identity with other platforms, maybe we want to evoke a specifc feeling from the font...";
"AboutFonts.Intro.text4" = "But the font is how we direclty display content to the user. Most of the time we expect the user to READ the content. So, the Font used to render it is extremely important.";
"AboutFonts.Intro.text5" = "The basic is: We want the font to be readable.";
"AboutFonts.Intro.comment3" = "But since we already stablished that not everyone percieves content or colors the same way...";
"AboutFonts.Intro.text6" = "The second part is: We want everyone, who can read, to be able to read our content.";
"AboutFonts.Intro.comment4" = "And that's where accessibility comes and it gets interesting.";
"AboutFonts.link" = "Check some different fonts!";

// UIContentSizeCategory

"UIContentSizeCategory.title" = "UIContentSizeCategory";
"UIContentSizeCategory.Intro.text1" = "The 'UIContentSizeCategory' is a system enum that represents the user's selected preferred content size.";
"UIContentSizeCategory.Intro.text2" = "It has 12 different size options from extra small to extra extra extra large, then the 'accessibility sizes' from accessibility medium to accessibility extra extra extra large. (Yep, 3 extras)";
"UIContentSizeCategory.Intro.comment1" = "The accessibility sizes are larger than the other ones, even if their name starts at 'accessibility medium' it's still larger than the regular 'extra extra extra large' size.";

"UIContentSizeCategory.List.title" = "List of UIContentSizeCategory";
"UIContentSizeCategory.List.text1" = "Here's a list of all the available content size categories. You can check the 'Identify preferred content size' page to get more information on how to properly identify them.";
"UIContentSizeCategory.List.comment1" = "Although, on code, usually you should not check this information directly and just use the UIFontMetric or system fonts to scale your font to the correct size.";
"UIContentSizeCategory.List.current" = "This is your current content size.";

"UIContentSizeCategory.Code.text1" = "You can check the system's font size by using the following code.";

"fontSize" = "Font size: %@";

// Size And Weight

"SizeAndWeight.title" = "Size and Weight";

// Implementing dynamic fonts

"ImplementingDynamicFonts.title" = "Scaling Fonts Automatically";
"ImplementingDynamicFonts.Intro.text1" = "Scaling fonts automatically is the property of a label or text to automatically increase the font size according to the user's accessibility settings.";
"ImplementingDynamicFonts.Intro.comment1" = "Thats what we call 'Dynamic fonts'.";
"ImplementingDynamicFonts.Intro.text2" = "To support this, we stop using 'fixed' font sizes, and start working with 'text styles'.";
"ImplementingDynamicFonts.Intro.comment2" = "In the example above, we are using a fixed font size (36), which will not cut it if we are expecting our font to scale itself automatically.";

"ImplementingDynamicFonts.TextStyles.title" = "Text Styles";
"ImplementingDynamicFonts.TextStyles.text1" = "Text styles represent a context for your font (title, body, caption...), instead of a fixed font size.";
"ImplementingDynamicFonts.TextStyles.text2" = "The font size will be defined by what is the current configuration on the device's settings, and it will scale every text style accordingly.";
"ImplementingDynamicFonts.TextStyles.comment1" = "So don't worry, your content will still have differences between titles and bodies and comments, and every other text-style you are using.";
"ImplementingDynamicFonts.TextStyles.text3" = "Also, If the 'adjustsFontForContentSizeCategory' property is set to 'False', the font will initially be the right size, but it won't respond to text-size changes the user makes in Settings or Control Center.";

"ImplementingDynamicFonts.SystemFonts.title" = "System Fonts";
"ImplementingDynamicFonts.SystemFonts.text1" = "The easiest way to support scaling your fonts automatically, is using the system defined text styles and fonts.";
"ImplementingDynamicFonts.SystemFonts.text2" = "They are going to work seemelesly with the user changes on font sizes.";
"ImplementingDynamicFonts.SystemFonts.comment1" = "The tough part comes with custom fonts, that we'll be discussing more on the following pages.";

// UIFontMetrics

"UIFontMetrics.title" = "UIFontMetrics";

"UIFontMetrics.Intro.text1" = "UIFontMetrics is the solution to support scaling custom fonts automatically. You create a font metrics object that specifies the font style that you want to use in your app.";
"UIFontMetrics.Intro.text2" = "Then, you load your custom font and scale it using the UIFontMetrics.";
"UIFontMetrics.Intro.comment1" = "Make sure your font looks good in bigger and smaller sizes! Readability is they key in every font size.";

// AdjustLayoutToScaledFontPage

"AdjustLayoutToScaledFontPage.title" = "Adjust Layout to Scaled Fonts";

"AdjustLayoutToScaledFontPage.Intro.text1" = "The most difficult part of supporting dynamic fonts is: \"Your carefully crafted layout is probably going to break once the labels increase or decrease in size.\"";
"AdjustLayoutToScaledFontPage.Intro.text2" = "We need to consider what we want to happen once the font increases. \nWill it break into a new line?\nWill part of the content just be cut off?\nWill the view itself increase in size?";
"AdjustLayoutToScaledFontPage.Intro.comment1" = "Hiding content is never a good solution, so we need to check approaches to make everything work with any size of font.";
"AdjustLayoutToScaledFontPage.Intro.comment2" = "This is also important to be discussed with your design team!";
"AdjustLayoutToScaledFontPage.Intro.text3" = "Check the following examples by changing the settings for the font size on your device and checking how each one behaves.";

"AdjustLayoutToScaledFontPage.FixedSize.title" = "Fixed size";
"AdjustLayoutToScaledFontPage.FixedSize.text1" = "The main rule is: Avoid fixed sizes as much as possible. When enlarging the font, it will probably not break the layout itself, but the content that is being displayed.";

"AdjustLayoutToScaledFontPage.LineBreak.title" = "Allow line breaking";
"AdjustLayoutToScaledFontPage.LineBreak.text1" = "By allowing the text to line break you can support displaying the content independently of it's size. But the issue is: It will probably increase the size of your layout vertically.";
"AdjustLayoutToScaledFontPage.LineBreak.comment1" = "Make sure you are expecting this! Sometimes we do not want our cells or groups to increase too much because it can break our entire layout.";

"AdjustLayoutToScaledFontPage.ScaleSize.title" = "Scale size up to a limit";
"AdjustLayoutToScaledFontPage.ScaleSize.text1" = "Another option, is allowing your content to scale it's size up to a limit so it doesn't break the layout (that much).";
"AdjustLayoutToScaledFontPage.ScaleSize.comment1" = "I think it's a nice solution when paired with multiline text, but, you need to make sure to test it with different content sizes.";

"AdjustLayoutToScaledFontPage.AllowTextToIncrease.title" = "Allow text to control the size of the content";
"AdjustLayoutToScaledFontPage.AllowTextToIncrease.text1" = "Sometimes, the text does not define alone out content size, but it's paired with an image or something else that controls the dimensions.";
"AdjustLayoutToScaledFontPage.AllowTextToIncrease.text2" = "To better support dynamic fonts, you need to make your layout expand beyond the size of the paired content, but keep everything still cohesive.";
"AdjustLayoutToScaledFontPage.AllowTextToIncrease.comment1" = "This is the complicated part, you need to make the layout accounting for text changes and visualize what would break and handle it correctly so it keeps working with bigger fonts.";
"AdjustLayoutToScaledFontPage.AllowTextToIncrease.comment2" = "In this case, it would also be nice to set a minimum size for the content, in case of smaller fonts that could also break the expected layout.";

"AdjustLayoutToScaledFontPage.WhatOption.title" = "Which option should I use?";
"AdjustLayoutToScaledFontPage.WhatOption.text1" = "Well, that's the hard part. It depends. It depends on where the text is at, it depends on how we want to scale our content (can our cells get wider?\nShould we break the lines instead?)";
"AdjustLayoutToScaledFontPage.WhatOption.comment1" = "That's why implementing Dynamic fonts after an app is ready and in production is so difficult. Literally anything can break.";
"AdjustLayoutToScaledFontPage.WhatOption.text2" = "But, such as adjusting the content to support screen readers, implementing dynamic fonts is a group work. Talk with your designers, question them \"What should happen if this title had an enlarged font?\", and bring all these discussion points to when you are building the layout.";

"AdjustLayoutToScaledFontPage.Example.title" = "Content title";
"AdjustLayoutToScaledFontPage.Example.body" = "Content body some content";
"AdjustLayoutToScaledFontPage.Example.description" = "Content description";

// IdentifyCurrentPreferredFontSize

"IdentifyCurrentPreferredFontSizePage.title" = "Identify preferred content size";

"IdentifyCurrentPreferredFontSizePage.Intro.text1" = "When selecting the preferred font size on the device's settings, multiple sizes and options are available.";
"IdentifyCurrentPreferredFontSizePage.Intro.text2" = "Even without enabling the accessibility option, the user can still select different font sizes.";
"IdentifyCurrentPreferredFontSizePage.Intro.text3" = "You may want to identify the currently selected font size to take additional actions on your device, you can do that by checking the preferred content size category on UIApplication.";

"IdentifyCurrentPreferredFontSizePage.Variations.title" = "Variations";
"IdentifyCurrentPreferredFontSizePage.Variations.text1" = "When the accessibility option is disabled, the size varies from extra small to extra extra extra large.";
"IdentifyCurrentPreferredFontSizePage.Variations.text2" = "And when the accessibility option is enabled, it goes from accessibility medium to accessibility extra extra extra large.";
"IdentifyCurrentPreferredFontSizePage.Variations.text3" = "The thing is: The accessibility medium is larger than then regular extra extra extra large size.";
"IdentifyCurrentPreferredFontSizePage.Variations.comment1" = "The content below is a recriation of the system's settings, and it's just an example. Slide the indicator to see how the value changes.";

"IdentifyCurrentPreferredFontSizePage.Example.toggle" = "Larger Accessibility Sizes";
"IdentifyCurrentPreferredFontSizePage.List.title" = "Example list of sizes";

// Dismiss

"DismissPage.title" = "Escape";
"DismissPage.text1" = "VoiceOver has a dedicated 'dismiss gesture', the Escape, which is used to close modals or pop the current view on the navigation stack.";
"DismissPage.comment1" = "Try it out! Enable VoiceOver and perform a 'Z' with 2 fingers.";

"DismissPage.Handle.text1" = "On UIKit, you can add a custom handling to this gesture by implementing the 'perform escape' method.";
"DismissPage.Handle.text2" = "On SwiftUI, it's the same as adding a 'Magic Tap' action, but using the escape type.";

// Reduce Motion

"motion" = "Motion";
"ReduceMotion.title" = "Reduce Motion";

"ReduceMotion.Intro.text1" = "Sometimes, we add moving items to our views. They may be some cool way to visualize something, an animation to present an item, a nice screen transition, or anything else at all.";
"ReduceMotion.Intro.text2" = "The problem is: Some people may feel discomfort when observing these animations, due to motion sickness or similar issues.";
"ReduceMotion.Intro.text3" = "That's why iOS systems have a a built in feature that allows users to request for reduced animations while using applications.";

"ReduceMotion.Disclaimer.text1" = "Apple's documentation suggests that if this property is 'True' UI should avoid large animations, especially those that simulate the third dimension.";
"ReduceMotion.Disclaimer.comment1" = "But as an overall guideline, we should usually disable all custom animations on views, parallax effects, and additional screen transitions.";
"ReduceMotion.Disclaimer.text2" = "Go to settings and change the reduce motion option, then, check the examples below.";

"ReduceMotion.simpleAppearance" = "Small animations can be disabled as well, but they are not required to. As a general guide, we'd like to disable them as well.";
"ReduceMotion.simpleAppearance.text" = "Open more actions";

"ReduceMotion.cardFlip" = "The example above used a 3D animation to flip the card when tapped. This is a fine example of animations that should be disabled.";
"ReduceMotion.cardFlip2" = "It's also a nice example to use Custom Actions for screen reader accessibility!";

// PreferCrossFade

"PreferCrossFadePage.title" = "Prefers cross-fade transitions";

"PreferCrossFadePage.text1" = "This is an additional option inside the 'Reduce Motion' on the device's settings.";
"PreferCrossFadePage.text2" = "When enabled, screen transitions should be reduced to a cross-fade animation instead of sliding-in.";
"PreferCrossFadePage.text3" = "This will also change the default behavior for NavigationViews and NavigationStacks, without additional code necessary.";
"PreferCrossFadePage.comment1" = "This app uses a default navigation stack. Go to settings and change this accessibility option, then come back and try opening new scenes or going back to previous ones. The default slide transition should be replaced with cross-fades.";
"PreferCrossFadePage.text4" = "You can also check if this feature is enabled to make manual adjustments.";
"PreferCrossFadePage.comment2" = "When enabled, this also means 'Reduce Motion' is also enabled.";

// WhatIsDarkMode

"darkMode" = "Dark Mode";
"lighMode" = "Light Mode";
"youAreCurrentlyOn" = "You are currently on: %@";

"WhatIsDarkMode.title" = "What is dark mode?";

"WhatIsDarkMode.Intro.text1" = "Dark mode is the ability to change the interface to a darker appearance. Where, usually, the background consists in darker colors and written content in lighter colors.";
"WhatIsDarkMode.Intro.comment1" = "The existence of a dark mode also implies the existence of a light mode, which is the opposite use of colors - light background and dark content.";
"WhatIsDarkMode.Intro.text2" = "It is, sometimes, an aesthetic preference for the user. In MacOS it can be even automatically set to change on specific ambient or lighting conditions.";
"WhatIsDarkMode.Intro.text3" = "But the deal here is that supporting dark mode can be a form of accessibility. The user can prefer using it for any reason, reading light content maybe feels better on top of a dark background, specially on low-light environments, or just felling more comfortable with less light comming from the device.";
"WhatIsDarkMode.Intro.comment2" = "You can read more on the 'Invert colors' page for more insights into different content colors.";

"WhatIsDarkMode.DoINeedIt.title" = "Do I need to support dark mode?";
"WhatIsDarkMode.DoINeedIt.text1" = "Sometimes, your interface does not need to support dark mode. Maybe it's a game and the colors have been specifically chosen for it, or the content's color take a bigger part in what your app does, so supporting dark mode is not an option.";
"WhatIsDarkMode.DoINeedIt.text2" = "But when we are talking about apps that are mostly written content, so the user needs to read a lot of things while using the application, or use some shade of white as the default background color, these are good examples of apps that should support dark mode.";
"WhatIsDarkMode.DoINeedIt.text3" = "Maybe to give the aesthetic choice, but also to support those who prefer the dark mode to read the content.";

"WhatIsDarkMode.ThisAppSupports.title" = "This app supports dark mode!";
"WhatIsDarkMode.ThisAppSupports.text1" = "The Accessibility Handbook fully supports dark mode. If you are using and iOS device, you can change you appearance on the system's settings.";
"WhatIsDarkMode.ThisAppSupports.text2" = "Or use the Control center menu (the system's pull down menu) as a shortcut, by long pressing the display brightness option, and it will display a control to select between light and dark modes.";
"WhatIsDarkMode.ThisAppSupports.text3" = "And if you are running this on an iOS simulator on a Mac, you can quickly change the appearance option with the keyboard command.";
"WhatIsDarkMode.ThisAppSupports.command" = "Command + shift + A";
"WhatIsDarkMode.ThisAppSupports.comment1" = "I strongly suggest reading the content on the Apple's 'Human Interface Guidelines' about Dark Mode.";
"WhatIsDarkMode.ThisAppSupports.image" = "Example of the Control center menu after long pressing the displays brightness options.";

// Appearances

"Appearances.title" = "Appearance changes";

"Appearances.Intro.text1" = "In this context, appearences is the group of possible interface color schemes the users can select on their iOS devices. Currently: dark or light modes.";
"Appearances.Intro.text2" = "We can identify which of these the user has currently selected and adjust our content accordingly.";

"Appearances.Code.title" = "Identify current color scheme";
"Appearances.Code.text1" = "In SwiftUI, it's as easy as an Environment variable. So it will automatically be notified whenever the user changes this setting, and your app will adjust itself automatically.";
"Appearances.Code.text2" = "And, of course, things are a little more complicated in UIKit, you need to use the 'UITraitCollection' object.";
"Appearances.Code.comment1" = "The main complication is the existence of the `unspecified` case in the 'UIUserInterfaceStyle' enum, (because of course it exists) but in this case, just throw your default variation of the content.";
"Appearances.Code.text3" = "And, in order to handle dynamic changes on the user interface style, you need to listen to changes on the trait collection object in a UIView or UIViewController, and update your content whenever it changes.";

"Appearances.supportingDarkMode" = "Supporting dark mode.";

// Dynamic Content

"DynamicContent.title" = "Dynamic Assets";
"DynamicContent.Intro.text1" = "When talking about supporting dark mode, we do not need to talk only about changing colors between the color schemes, but other contents can also be adapted to different modes.";
"DynamicContent.Intro.text2" = "Here we'll be addressing assets, specially images, but the same thing applies to color assets.";

"DynamicContent.XCTAssets.title" = "XCAssets";
"DynamicContent.XCTAssets.text1" = "When using XCAssets on Xcode, they provide options to support different assets for different color schemes, along side multiple assets for different screen dimensions. This can be used in both images and color assets.";
"DynamicContent.XCTAssets.text2" = "Specially when the images have background colors or are difficult to see on a specific color scheme, you can provide different assets for them.";
"DynamicContent.XCTAssets.image1" = "Above is an image of the Xcode's asset catalog. When selecting an image asset, the right panel will display the 'Appearance' option, which you can enable to add images for light and dark modes.";
"DynamicContent.XCTAssets.text3" = "When switching from dark/light mode and if you are using the XCTAssets the images will automatically change themselves to the correct version.";
"DynamicContent.XCTAssets.text4" = "The examples below have been built using the XCTAssets and have different assets for each color scheme. Change between light and dark mode and check how they behave.";

// Tintable images

"TintableImages.title" = "Tintable images";
"TintableImages.TintableImages.text1" = "You don't necessarily need to have different assets for different color schemes. One thing you can use with XCAssets are tintable images. It means adding the image as a template, and defining it's color later.";
"TintableImages.TintableImages.text2" = "From Apple's documentation:";
"TintableImages.TintableImages.citation1" = "When you add a template image to a button or image view, you also specify a tint color. The view applies the tint color to every pixel that doesn’t have an alpha of 0.0, causing the image’s shape to adopt that color. To support different appearances, simply change the tint color. For example, you might apply a dark tint color in light environments and a light tint color in dark environments.";
"TintableImages.TintableImages.citation2" = "When creating your image, use a transparent background and add black pixels wherever you want the image to appear. The pixels can be fully or partially opaque, depending on whether you want portions of your template image to blend with the background colors. When adding the image to your asset catalog, set the Render As option for the Image Set asset to Template Image in the inspector.";

"TintableImages.Example.text1" = "The image above was built using a template image. When no tint color is provided, it's going to use the default color for the image. This is a good approach for icons you may have on your UI.";
"TintableImages.Example.text2" = "But you can specify custom tint colors. Remember to keep these colors also adapted to each color scheme available.";
"TintableImages.Example.text3" = "And if you haven't set the asset as a 'template image' on the XCTAssets, you can force the template on code as well.";

"TintableImages.doc" = "Providing images for different appearances";

// Dynamic colors

"DynamicColors.title" = "Dynamic colors";

"DynamicColors.Intro.text1" = "When talking about supporting Dark Mode, 'dynamic colors' is the capability of colors to correctly adjust themselves to the current color scheme.";

"DynamicColors.SystemColors.title" = "System colors";
"DynamicColors.SystemColors.text1" = "When using System colors, they may automatically adjust themselves to the current color scheme.";
"DynamicColors.SystemColors.text2" = "This is true to background and label colors.";
"DynamicColors.SystemColors.text3" = "UIColors also have colors with the 'system' preffix, which means they are adaptable to color scheme as well.";
"DynamicColors.SystemColors.comment1" = "SwiftUI 'Color' currently does not have these system colors, but you can map the 'UIColor' object into a 'Color' if you want.";

"DynamicColors.CustomColors.title" = "Custom colors";
"DynamicColors.CustomColors.text1" = "When using custom colors, you will need to manually select the correct color for the current appearance.";
"DynamicColors.CustomColors.comment1" = "Apple's documentation suggests usign Color Assets for this, which we'll cover in the following page.";
"DynamicColors.CustomColors.text2" = "But most of the time we have a separate library for our colors or a JSON file with the hex codes, and we manually create our color objects.";
"DynamicColors.CustomColors.text3" = "So we need a way to handle changing our colors when necessary.";
"DynamicColors.CustomColors.text3" = "We can use a specific init in the 'UIColor' object, which gives the current UITraitCollection object, to wrap our color file and help us define the correct color for the context.";
"DynamicColors.CustomColors.text4" = "And in SwiftUI we can use the color scheme Environment property to help us define the correct color.";
"DynamicColors.CustomColors.text5" = "The issue, most of the times, is supporting changes on the color scheme with the app running. Make sure to reload the colors on your UIView or ude the color scheme Environment property on your SwiftUI Views.";

// Visual Aid

"VisualAid" = "Visual Aid";

// Button Shapes

"ButtonShapes.title" = "Button Shapes";

"ButtonShapes.Intro.text1" = "\"Button Shapes\" is another accessibility option that can be enabled on the system settings.";
"ButtonShapes.Intro.text2" = "The idea is to highlight buttons, by adding outlines to them, in order to help users identify which contents are interactable while using your application.";
"ButtonShapes.Intro.comment1" = "If you are using 'UIButton' or a 'Button', this highlight will automatically be displayed whenever the feature is enabled.";

"ButtonShapes.Example.text1" = "Check the multiple examples of buttons below, then enable the 'Button Shapes' feature on the device's setting to see how they behave.";
"ButtonShapes.Example.comment1" = "It's nice to notice that not all buttons will have the same highlight. The back button in the navigation bar will be underlined, for instance.";

"ButtonShapes.Code.text1" = "If you need to identify to make any manual changes on your content, you can use a static variable on UIKit or an Environment variable on SwiftUI.";

"button" = "Button";

// Bolded Text

"BoldedText.title" = "Bolded Text";

"BoldedText.Intro.text1" = "\"Bolded Text\" is another accessibility option that can be enabled on the system settings.";
"BoldedText.Intro.text2" = "It's mainly used by people with lower vision to help reading content on your app by enlarging the font's weight.";
"BoldedText.Intro.text3" = "When using system fonts, they will automatically adapt themselves to the user's defined setting for the weight.";
"BoldedText.Intro.comment1" = "When using custom fonts, you may need to manually define it's weight when necessary.";

"BoldedText.Code.text1" = "It's also important to notice that fonts that are already bold, become even 'bolder' when manually adjusting these changes.";
"BoldedText.Code.comment1" = "This app fully supports bolded fonts, change the accessibility option on the device's setting and check how the app behaves.";

// Section: Learn the Features

"LearnAccessibility.title" = "Learn Accessibility";

// Thinking Accessibility

"ThinkingAccessibility.title" = "Thinking Accessibility";
"ThinkingAccessibility.text1" = "This section is a different type of guide, where we want to show you how to think about accessibility while developing or creating new applications.";
"ThinkingAccessibility.text2" = "Accessibility is one of those things that if you say: \"I want to improve accessibility on our app!\", nobody is going to say no.";
"ThinkingAccessibility.text3" = "But it can get hard to start making these improvements and see a real impact to your users.";
"ThinkingAccessibility.text4" = "Or maybe you are starting a new app and you want to give support to accessibility features from the begining.";
"ThinkingAccessibility.text5" = "So, we are bringing a content based on real life experiences, alongside the common guide for all the accessibility options and features, to help you not only learn what they are, but the best scenarios to use them.";
"ThinkingAccessibility.comment1" = "The idea is to help you \"think accessibility\", understand common pitfalls and start a new project having a good idea of what you should expect when creating an iOS application.";
"ThinkingAccessibility.text6" = "Welcome, to the Accessibility Handbook classes!";
"ThinkingAccessibility.comment2" = "So, sit tight! If you are new on the iOS accessibility world, this is going to be a wild ride!";

// Accessibility is a team game

"TeamGame.title" = "Accessibility is a team game";
"TeamGame.text1" = "While learning accessibility by yourself feels good, it feels good to be able to reach people you could not before, it fells good to provide new services and content to a whole new group of people, you are most likely not going to handle it on your own.";
"TeamGame.comment1" = "Bear with me! 🐻";
"TeamGame.text2" = "If you work on a company, on a startup, or you made a new app project with some friends, you know that creating a new app is not an easy task.";
"TeamGame.text3" = "And accessibility is not a developer or designer specific job. It's easy to think\n\n\"Oh, our designer should have figured that!\"\n\nOr even,\n\n\"Accessibility? That's a job for our developers!\"";
"TeamGame.text4" = "Think of it as part of your culture. Everybody should understand and question how accessibility should work.";
"TeamGame.text5" = "This way, we can make sure that we have the right questions and issues being tackled on every aspect of your application, on design, development, product... everything!";

"TeamGame.TalkToYourTeam.title" = "Talk to your team";
"TeamGame.TalkToYourTeam.text1" = "What was the last time you asked your designer \"Have you thought about how to interact with this element with a screen reader?\"";
"TeamGame.TalkToYourTeam.text2" = "Or what was the last time you asked your developer \"How can we make this component have a better interaction when using accessibility features?\"";
"TeamGame.TalkToYourTeam.comment1" = "I know this sound a little like coaching, sorry about that, but it's important.";
"TeamGame.TalkToYourTeam.text3" = "By asking questions, you are bringing the discussion about accessibility into your daily work.";
"TeamGame.TalkToYourTeam.text4" = "\"This font seems small, do we have support for dynamic fonts?\"";
"TeamGame.TalkToYourTeam.text5" = "\"The contrast does not seem good, have we checked for colorblindness? Do we have support for a increased contrast color pallet?\"";
"TeamGame.TalkToYourTeam.text6" = "Make questions. Usually, nobody is a specialist in accessibility, maybe someone knows more about a different platform than the one you are working with, and you can try connecting this knowledge with your current work.";
"TeamGame.TalkToYourTeam.comment2" = "I'm not a designer nor a specialist myself, I'm more of an enthusiast.";
"TeamGame.TalkToYourTeam.text7" = "But to make good questions, and give nice suggestions, you need to understand more what are you really working with.";

"TeamGame.ShareTheKnowledge.title" = "Share the knowledge";
"TeamGame.ShareTheKnowledge.text1" = "We believe that a good knowledge is something to share. And there is no better way to create an accessibility culture without sharing it.";
"TeamGame.ShareTheKnowledge.text1" = "Show to your peers whenever you create something nice, when you use a new feature that you have never used before.";
"TeamGame.ShareTheKnowledge.text2" = "Spreading knowledge will help more people to know about it, and give them and yourself more tools to work with in the future.";
"TeamGame.ShareTheKnowledge.comment1" = "And that goes for everything, not only accessibility!";
"TeamGame.ShareTheKnowledge.text3" = "And if you are using this app, you can even use the neat share tool on top of every page to bring people directly into an example of what you are talking about!";

// Learn the Features - Page

"LearnTheFeatures.title" = "Learn the Features";
"LearnTheFeatures.text1" = "In order to make good questions, give better suggestions, integrate accessibility on your development...";
"LearnTheFeatures.text2" = "You need to learn what the accessibility features and options are, what difference they make on your app, how they impact your users, and most of all: How to use them.";
"LearnTheFeatures.text3" = "And this is your lucky day! Because this app not only contains guides on how to implement iOS accessibility options, but you can try them for yourself!";

"LearnTheFeatures.VoiceOver.title" = "VoiceOver";
"LearnTheFeatures.VoiceOver.text1" = "Supporting VoiceOver use on your apps is usually what needs the most implementation and thought.";
"LearnTheFeatures.VoiceOver.comment1" = "But, do you know what you can do with VoiceOver?";
"LearnTheFeatures.VoiceOver.text2" = "It's not only setting an 'accessibility label' into everything. We have different ways to group content, different ways to interact with elements and different ways to navigate through the app.";
"LearnTheFeatures.VoiceOver.text3" = "If you are not familiar with the VoiceOver, the concepts, the names, the gestures, take a look into our VoiceOver section on the Development Guides!";
"LearnTheFeatures.VoiceOver.comment2" = "And make sure to try using the VoiceOver while reading the content so you can better understand what each element does.";
"LearnTheFeatures.VoiceOver.text4" = "And if you want a \"hand\" to learn how to navigate using the VoiceOver, we have a gesture guide!";

"LearnTheFeatures.BeyondTheVoiceOver.title" = "Beyond The VoiceOver";
"LearnTheFeatures.BeyondTheVoiceOver.text1" = "Sometimes when talking about accessibility on mobile devices, we focus only on screen readers (on iOS, the VoiceOver).";
"LearnTheFeatures.BeyondTheVoiceOver.text2" = "But that's not what accessibility is about! There is an entire world of features, options, issues, disabilities, devices... that are part of accessibility.";
"LearnTheFeatures.BeyondTheVoiceOver.text3" = "And we also have guides on those!";
"LearnTheFeatures.BeyondTheVoiceOver.text4" = "Learn more about colors, motion, visual aids, fonts, haptics, contrast... and much more, so you know what to think and ask about.";

// Try it yourself

"TryItYourself.title" = "Try it yourself";
"TryItYourself.text1" = "Yep, thats it, try it for yourself!";
"TryItYourself.text2" = "Try not to keep wat you learn here only on this app. Start a new app, try implementing dynamic fonts, VoiceOver features, Dark mode, Rotor entries...";
"TryItYourself.text3" = "Understand what they do, how they impact your code, and how to use them.";
"TryItYourself.text4" = "We even have hundreds of code examples to help you get started. But they are only examples.";
"TryItYourself.text5" = "You'll get it for yourself once you really start introducing these featuers on your code and your app.";
"TryItYourself.text6" = "And also, try running everything on a real device. Get the feel of how things work in the real life, out of Xcode.";
"TryItYourself.comment1" = "What was the last time you ran your app with the VoiceOver running? Or that you tried to increase your fonts to see how your layout behaves?";
"TryItYourself.text7" = "The next sections, will introduce you to issues and common uses of accessibility. How to implement them, and how to plan to create more accessible apps.";
"TryItYourself.text8" = "Don't give up! We are just starting 😉";
